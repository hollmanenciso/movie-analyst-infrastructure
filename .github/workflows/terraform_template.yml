name: 'Terraform'
 
#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
 
on:
  push:
    branches:
     - '*'
     
  pull_requests:
    branches:
     - main
 
permissions:
  contents: read
 
env:
# verbosity setting for Terraform logs
 TF_LOG: INFO
 # Credentials for deployment to AWS
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 # S3 bucket for the Terraform state
 BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}
#jobs:
#  terrascan_job:
#    runs-on: ubuntu-latest
#    name: terrascan-action
#    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v2
#    - name: Run Terrascan
#      id: terrascan
#      uses: tenable/terrascan-action@main
#      with:
#        iac_type: 'terraform'
#        iac_version: 'v14'
#        policy_type: 'aws'
#        only_warn: true
#        sarif_upload: true
        #non_recursive:
        #iac_dir:
        #policy_path:
        #skip_rules:
        #config_path:
#    - name: Upload SARIF file
#      uses: github/codeql-action/upload-sarif@v1
#      with:
#        sarif_file: terrascan.sarif
       
jobs:
  plan:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    steps:
   # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
 
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
 
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
 
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out=tfplan
 
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
   
  apply:
    needs: plan
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
 
    steps:
      - name: Terraform Apply
        run: terraform apply tfplan -auto-approve