name: 'Terraform'

on:
  push:
    branches:
     - '*'
     
permissions:
  contents: read
 
env:
 TF_LOG: INFO
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

#jobs:
#  terrascan_job:
#    runs-on: ubuntu-latest
#    name: terrascan-action
#    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v2
#    - name: Run Terrascan
#      id: terrascan
#      uses: tenable/terrascan-action@main
#      with:
#        iac_type: 'terraform'
#        iac_version: 'v14'
#        policy_type: 'aws'
#        only_warn: true
#        sarif_upload: true
        #non_recursive:
        #iac_dir:
        #policy_path:
        #skip_rules:
        #config_path:
#    - name: Upload SARIF file
#      uses: github/codeql-action/upload-sarif@v1
#      with:
#        sarif_file: terrascan.sarif
       
jobs:
  plan:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    if: github.ref != 'refs/heads/main'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    steps:
   # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Run Terrascan
      id: terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'terraform'
        iac_version: 'v14'
        policy_type: 'aws'
        only_warn: true
        sarif_upload: true
        #non_recursive:
        #iac_dir:
        #policy_path:
        #skip_rules:
        #config_path:
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: terrascan.sarif
      
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
 
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
 
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
 
  apply:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
 
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      #- name: Manual Workflow Approval
      #  uses: trstringer/manual-approval@v1.9.0
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }}
      #    issue-title: "Deploying to prod from development"
      #    minimum-approvals: 1
      - name: Terraform Apply
        run: terraform apply -auto-approve